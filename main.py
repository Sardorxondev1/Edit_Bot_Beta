from threading import Thread
from random import randint
import traceback
import datetime
import telebot
import metod
import time


# 5052917948:AAFPg3FIPWllF8Kz0X5Bl5XRzRFOP6WUQmM Test
# 5205648942:AAHYxUFII69pZMZ78sU4EBX7uwTVj5_HfMg Main
bot = telebot.TeleBot('5168841978:AAGPbns3NLLb1Staj2C9FiM_N8QaNx826Q4')
channels = []
try:
    users, edits, mails, sinonims = metod.load_all(bot)
except Exception as e:
    bot.send_message(-1001694445646, '–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –±–∞–∑—ã!!!\n' + str(e))
    users, edits, mails, sinonims = metod.load_all(bot, load_base=False)

type_edits = ['–ê–Ω–∏–º–µ', '–§–∏–ª—å–º', '–°–µ—Ä–∏–∞–ª', '–ò–≥—Ä–∞', '–í—Å—ë']
all_save = False

all_names, edit_names = [], [[], [], [], [], ['']]
for e in edits:
    if e.video is not None and e.name is not None and e.type != 4:
        edit_names[e.type].append(e.name)
        all_names.append(e.name)
for i in range(len(edit_names)):
    edit_names[i] = list(set(edit_names[i]))
all_names = list(set(all_names))

num_req_hour = req_hour = num_act_users = req_all = 0
act_users_hour, first_hour = set(), True


def Timer():
    global act_users_hour, req_hour, num_act_users, num_req_hour, all_save, first_hour
    truetime = (datetime.datetime.now() + datetime.timedelta(hours=3)).strftime("%d %B %Y %H:%M:%S")
    bot.send_message(-1001698445646, 'Start ' + truetime)
    while True:
        for i in range(360):
            for m in mails:
                delta = datetime.datetime.strptime(m['date'], '%Y-%m-%d %H:%M:%S') - datetime.datetime.now()
                if delta.seconds < 10:
                    if m['button'] is not None:
                        keyboard = telebot.types.InlineKeyboardMarkup()
                        keyboard.row(telebot.types.InlineKeyboardButton(m['button'], url=m['link']))
                        for u in users:
                            time.sleep(0.05)
                            if u.user_id == 1532205759:
                                bot.send_photo(u.user_id, photo=m['photo'], caption=m['text'], reply_markup=keyboard)
                    else:
                        for u in users:
                            time.sleep(0.05)
                            if u.user_id == 1532205759:
                                bot.send_photo(u.user_id, photo=m['photo'], caption=m['text'])
                    all_save = True
                    mails.pop(mails.index(m))

            if all_save:
                t = time.time()
                try:
                    metod.save_all(bot, users, edits, mails, sinonims)
                except Exception as e:
                    bot.send_message(-1001644445646, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!!!\n' + str(e))
                all_save = False
                time.sleep(max(0.001, 10 - (time.time() - t)))
            else:
                time.sleep(10)

        all_save = True
        num_act_users = len(act_users_hour)
        act_users_hour = set()
        num_req_hour = req_hour
        first_hour = False
        req_hour = 0


def get_user(user_id):
    for i in range(len(users)):
        if users[i].user_id == user_id:
            return users[i]

    u = metod.User(user_id)
    users.append(u)
    return u


@bot.message_handler(commands=["start"])
def start(message):
    user = get_user(message.chat.id)
    metod.menu(bot, message.chat.id, user, edit=False)


@bot.message_handler(commands=["_creator"])
def start(message):
    bot.send_message(message.chat.id,
                     '–≠–¥–∏—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ö–æ—Å–∞—á –ò–≤–∞–Ω, —Å—Ç—É–¥–µ–Ω—Ç 1 –∫—É—Ä—Å–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ö–§–£ –ò–¢–ò–°, –≤ —Ñ–µ–≤—Ä–∞–ª–µ 2022 –≥–æ–¥–∞')


@bot.message_handler(commands=["save"])
def save(message):
    global all_save
    if message.chat.id == -1001444545646:
        all_save = True
        bot.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω—è—é...')


@bot.message_handler(commands=["e3i90it"])
def admin(message):
    user = get_user(message.chat.id)

    if user.admin:
        user.message_del.append(bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä').message_id)
        return 0
    user.admin = True

    user.message_del.append(bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!').message_id)


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    global req_hour, req_all, all_save

    chat_id = call.message.chat.id
    user = get_user(chat_id)
    req_hour += 1
    req_all += 1

    if user.user_id not in act_users_hour:
        if not user.check_subscriber(bot, channels):
            user.subscribed = False
        act_users_hour.add(user.user_id)

    first_click = call.data == 'Del_folder' and user.vars.get('click') is None
    if call.data[:3] not in ['mor', 'add', 'del', 'Fol'] and not first_click:
        try:
            for id in user.message_del:
                bot.delete_message(chat_id, id)
        except Exception:
            pass
        user.message_del = []

    if not user.subscribed and not user.admin:
        if call.data != 'ready':
            call.data = ''
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.row(telebot.types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Subarashi_edits",
                                                            url='https://t.me/Subarashi_edits'))
            keyboard.row(telebot.types.InlineKeyboardButton("–ö–∞–Ω–∞–ª AnimeEdit", url='https://t.me/editshub'))
            keyboard.row(telebot.types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="ready"))
            text = 'üå∏ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:'
            bot.edit_message_text(text, chat_id=chat_id, message_id=call.message.message_id)
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=keyboard)
        else:
            if not user.check_subscriber(bot, channels):
                bot.answer_callback_query(callback_query_id=call.id, text='ü•∫ –£–≤—ã, –Ω–æ —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')
            else:
                user.subscribed = True
                call.data = 'menu'

    elif call.data == 'menu0':
        text = '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–¥–∏—Ç–æ–≤'
        user.vars = {}
        type_edits_smiles = ['üîÆ –ê–Ω–∏–º–µ', 'üé¨ –§–∏–ª—å–º—ã', 'üéû –°–µ—Ä–∏–∞–ª—ã', 'üéÆ –ò–≥—Ä—ã', 'üåê –í—Å—ë']
        metod.message(bot, call, text, type_edits_smiles, 'inmenu0')

    elif call.data[:7] == 'inmenu0' or call.data[:6] == 'n_list':
        if user.vars.get('type') is None and call.data[:7] == 'inmenu0':
            user.vars['type'] = int(call.data[7:]) if call.data[7:] != '' else 0
            if user.vars.get('type') == 4:
                call.data = 'names0'
        if user.vars.get('type') is None:
            user.vars['type'] = 0

        if user.vars.get('type') != 4:

            text = '–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å ' \
                   '—ç–¥–∏—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ' \
                   '(–µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–æ–¥–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)'

            metod.show_list_names(bot, call, edit_names[user.vars['type']], text, 'names', 'menu0', user)

    elif call.data == 'menu1':
        text = '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:'
        but = ['ü§° –†–∞–¥–æ—Å—Ç—å', 'ü•≥ –í–µ—Å–µ–ª—å–µ', 'üòé –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '‚òπÔ∏è –ì—Ä—É—Å—Ç—å ',
               'ü§¨ –ì–Ω–µ–≤', 'üòÆ‚Äçüí® –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', 'ü™ì –¢–∏–ª—å—Ç', '‚ö∞ 1000-7']
        metod.message(bot, call, text, but, 'mood', row1=False)

    elif call.data == 'menu2':
        text = '–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:'
        but = ['üêè–û–≤–µ–Ω', 'üêÇ–¢–µ–ª–µ—Ü', 'üë•–ë–ª–∏–∑–Ω–µ—Ü—ã', 'ü¶û–†–∞–∫', 'ü¶Å–õ–µ–≤', 'üë±‚Äç‚ôÄÔ∏è–î–µ–≤–∞',
               '‚öñ–í–µ—Å—ã', 'ü¶Ç–°–∫–æ—Ä–ø–∏–æ–Ω', 'üèπ–°—Ç—Ä–µ–ª–µ—Ü', 'üêê–ö–æ–∑–µ—Ä–æ–≥', 'üåä–í–æ–¥–æ–ª–µ–π', 'üêü–†—ã–±—ã']
        metod.message(bot, call, text, but, 'zodiac', row1=False)

    elif call.data == 'menu3' or call.data[:6] == 'r_next':
        text = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
        if call.data == 'menu3':
            metod.message(bot, call, '–Ω–∞–∂–º–∏ üé≤ —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≠–¥–∏—Ç—ã', ['üé≤'], 'r_next')
            return 0
        metod.random_edit(bot, call, user, text, edits)

    elif call.data == 'Add_folder':
        if len(user.folders) > 5:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫')
        elif user.vars.get('text') is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏')
        elif len(str(user.vars['text'])) > 15:
            bot.answer_callback_query(callback_query_id=call.id, text='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')
        elif user.vars['text'] in [g[0] for g in user.folders]:
            bot.answer_callback_query(callback_query_id=call.id, text='–≠—Ç–∞ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        else:
            for char in str(user.vars['text']):
                c = char.lower()
                if not ('a' <= c <= 'z' or '–∞' <= c <= '—è' or '0' <= c <= '9'
                        or c in [' ', '_', '!', '?', ',', '.', '-', '/', '(', ')']):
                    text = '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–º–µ–µ—Ç—Å—è –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª "' + c + '"'
                    bot.answer_callback_query(callback_query_id=call.id, text=text)
                    return 0
            user.folders.append([user.vars['text']])
            bot.answer_callback_query(callback_query_id=call.id, text='–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
            call.data = 'menu4'

    elif call.data == 'Del_folder':
        if len(user.folders) == 1:
            bot.answer_callback_query(callback_query_id=call.id, text='–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞–ø–∫–∞')
        elif user.vars.get('click') is None:
            user.vars['click'] = True
            bot.answer_callback_query(callback_query_id=call.id, text='–ù–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å')
        else:
            user.folders.pop(user.vars['ind_fold'])
            bot.answer_callback_query(callback_query_id=call.id, text='–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
            call.data = 'menu4'

    if call.data == 'menu4':
        user.vars['click'] = None
        but = [f[0] for f in user.folders]
        spec = [[('üìí –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É', 'Add_folder'), ('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu')]]
        metod.message(bot, call, '–ú–æ–π —ç–¥–∏—Ç–ª–∏—Å—Ç', but, 'fold', row1=False, spec_bat=spec)

    elif call.data[:4] == 'fold' or call.data[:6] == 'f_list':
        if call.data[:4] == 'fold':
            fold = user.folders[int(call.data[4:])]
            user.vars['ind_fold'] = int(call.data[4:])
        else:
            fold = user.folders[user.vars['ind_fold']]
        user.message_del.append(bot.send_message(chat_id, fold[0]).message_id)
        list_ind_edits = [i for i in fold[1:] if edits[i].video is not None]
        spec = [[('‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É', 'Del_folder'), ('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu4')]]
        metod.show_list_edits(bot, user, call, list_ind_edits, edits, 'f', spec_bat=spec)

    elif call.data == 'menu5':
        user.vars = {}
        but = ['üìï –ë–∞–∑–∞ —ç–¥–∏—Ç–æ–≤', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚è∞ –†–∞—Å—Å—ã–ª–∫–∏', 'üìñ –°–∏–Ω–æ–Ω–∏–º—ã']
        metod.message(bot, call, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', but, 'admin')

    elif call.data == 'admin0' or call.data[:6] == 'b_list':
        user.vars['admin_del'] = True
        user.message_del.append(bot.send_message(chat_id, '–ë–∞–∑–∞ –≤—Å–µ—Ö —ç–¥–∏—Ç–æ–≤').message_id)
        list_ind_edits = [i for i in range(len(edits)) if edits[i].video is not None]
        metod.show_list_edits(bot, user, call, list_ind_edits, edits, 'b')

    elif call.data[:6] == 'admin1':
        if call.data == 'admin1_get':
            with open('user_list.txt', 'w') as f:
                for u in users:
                    f.write(str(u.user_id) + '\n')
            with open('user_list.txt', 'r') as f:
                user.message_del.append(bot.send_document(
                    chat_id, document=f, caption='User_list ' + str(time.ctime(time.time()))).message_id)
        text = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' \
               f'‚úî–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n' \
               f'‚úî–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å: {req_all}\n' \
               f'‚úî–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {num_req_hour if not first_hour else str(req_hour) + "..."}\n' \
               f'‚úî–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Å: ' \
               f'{num_act_users if not first_hour else str(len(act_users_hour)) + "..."}\n'
        spec = [[('–ü–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–ª–∏—Å—Ç', 'admin1_get'), ('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu5')]]
        metod.message(bot, call, text, [], '', spec_bat=spec, add_ind=False)

    elif call.data[:6] == 'admin2':
        if call.data == 'admin2':
            user.vars['post'] = None
            user.vars['text'] = None
        elif call.data[:10] == 'admin2_get':
            user.vars['mail_del'] = ''
            mail = mails[int(call.data[10:])]
            delta = datetime.datetime.strptime(mail['date'], '%Y-%m-%d %H:%M:%S') - datetime.datetime.now()
            comment = '\n' + '_' * 30 + '\n–î–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ' + mail['date'] + ' \n–ß–µ—Ä–µ–∑ ' + str(delta.days) + ' –¥–Ω–µ–π'
            keyboard = telebot.types.InlineKeyboardMarkup()
            if mail['button'] is not None:
                keyboard.row(telebot.types.InlineKeyboardButton(mail['button'], url=mail['link']))
            button = telebot.types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data='del' + call.data[10:] + '|4')
            keyboard.row(button)
            user.message_del.append(bot.send_photo(call.message.chat.id, mail['photo'], reply_markup=keyboard,
                                                   caption=mail['text'] + comment).message_id)
        elif call.data == 'admin2_add':
            if user.vars.get('post') is None:
                text = '–ü—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n' \
                       '–î–æ–±–∞–≤—å –≤ —Ç–µ–∫—Å—Ç –ø—É–Ω–∫—Ç—ã text: –∏ link: —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É'
                user.message_del.append(bot.send_message(chat_id, text).message_id)
            elif user.vars.get('text') is None:
                user.message_del.append(
                    bot.send_message(chat_id, '–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY,hh:mm').message_id)
            else:
                try:
                    info1 = user.vars['text'].split(',')
                    info2 = info1[0].split('.') + info1[1].split(':')
                    d3, d2, d1, t1, t2 = list(map(int, info2))
                    date_str = str(datetime.datetime(d1, d2, d3, t1, t2))
                except Exception:
                    bot.answer_callback_query(callback_query_id=call.id, text='–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
                    return 0
                photo, text, button, link = user.vars['post'][0], user.vars['post'][1], None, None
                if len(user.vars['post']) == 4:
                    button, link = user.vars['post'][2], user.vars['post'][3]
                mails.append({'date': date_str, 'photo': photo,
                              'text': text, 'button': button, 'link': link})
                bot.answer_callback_query(callback_query_id=call.id, text='–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
                all_save = True

        spec = [[('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'admin2_add'), ('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu5')]]
        but = [capt['text'][:capt['text'].find('\n')] + ' ...' for capt in mails]
        metod.message(bot, call, '–í—ã–±–µ—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', but, 'admin2_get', spec_bat=spec)

    elif call.data[:6] in ['admin3', 'a_list', 'a_sino']:
        if call.data == 'admin3add' and user.vars.get('text') is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç')
        elif call.data == 'admin3add':
            word = str(user.vars['text'])
            if sinonims.get(all_names[user.vars['ind']]) is None:
                sinonims[all_names[user.vars['ind']]] = []
            if user.vars['text'] in sinonims[all_names[user.vars['ind']]]:
                bot.answer_callback_query(callback_query_id=call.id, text='–¢–∞–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º —É–∂–µ –µ—Å—Ç—å')
                return 0
            sinonims[all_names[user.vars['ind']]].append(word)
            text = '–°–∏–Ω–æ–Ω–∏–º ' + word + ' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –Ω–∞–∑–≤–∞–Ω–∏—é ' + all_names[user.vars['ind']]
            bot.answer_callback_query(callback_query_id=call.id, text=text)
        elif call.data[:9] == 'admin3del':
            sinonims[all_names[user.vars['ind']]].pop(int(call.data[9:]))
            bot.answer_callback_query(callback_query_id=call.id, text='–°–∏–Ω–æ–Ω–∏–º —É–¥–∞–ª–µ–Ω')
        elif call.data[:9] == 'a_sinonim':
            user.vars['ind'] = int(call.data[10:])

        if call.data == 'admin3' or call.data[:6] == 'a_list':
            user.vars['text'] = None
            text = '–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤'
            metod.show_list_names(bot, call, all_names, text, 'a_sinonims', 'menu5', user, finder=False)
        elif call.data[:6] in ['admin3', 'a_sino']:
            ind = user.vars['ind']
            but = sinonims[all_names[ind]] if sinonims.get(all_names[ind]) is not None else []
            spec = [[('–¥–æ–±–∞–≤–∏—Ç—å', 'admin3add'), ('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'admin3')]]
            text = '–í—ã–±–µ—Ä–∏ —Å–∏–Ω–æ–Ω–∏–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é ' + all_names[ind] + ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
            metod.message(bot, call, text, but, 'admin3del', spec_bat=spec)

    elif call.data[:4] == 'more':
        ind, status = call.data[4:].split('|')
        keyboard = metod.get_keyboard_video(ind, int(status) - 1)
        bot.edit_message_caption(edits[int(ind)].caption, chat_id, call.message.message_id)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=keyboard)

    elif call.data[:3] == 'add':
        ind, status = call.data[3:].split('|')
        keyboard = metod.get_keyboard_video(ind, int(status), open_add=True)
        for i in range(len(user.folders)):
            button = telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ ' + user.folders[i][0],
                                                        callback_data='Fold_add' + str(i) + '|' + ind + '|' + status)
            keyboard.row(button)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=keyboard)

    elif call.data[:3] == 'del':
        ind, status = call.data[3:].split('|')
        keyboard = metod.get_keyboard_video(ind, 0)
        if user.vars.get('admin_del') is not None:
            edits[int(ind)].delete()
        elif user.vars.get('mail_del') is not None:
            mails.pop(int(ind))
            user.vars['post'] = None
            user.vars['text'] = None
        else:
            ind_f = int(user.vars['ind_fold'])
            user.folders[ind_f].pop(user.folders[ind_f].index(int(ind)))
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=keyboard)
        bot.answer_callback_query(callback_query_id=call.id, text='–£–¥–∞–ª–µ–Ω–æ')

    elif call.data[:8] == 'Fold_add':
        f, ind, status = call.data[8:].split('|')
        if user.folders[int(f)].count(int(ind)) > 0:
            bot.answer_callback_query(callback_query_id=call.id, text='–≠—Ç–æ—Ç —ç–¥–∏—Ç —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ')
        else:
            user.folders[int(f)].append(int(ind))
            bot.answer_callback_query(callback_query_id=call.id, text='–≠–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ ' + user.folders[int(f)][0])
            keyboard = metod.get_keyboard_video(ind, int(status))
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=keyboard)

    if call.data[:4] in ['mood', 'zodi', 'name', 'find']:
        if user.vars.get('type') is None:
            user.vars['type'] = 0
        if call.data == 'find':
            if user.vars.get('text') is None:
                bot.answer_callback_query(callback_query_id=call.id, text='–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')
                return 0
            text = str(user.vars['text']).lower().strip()
            ind = metod.find_word(text, edit_names[user.vars['type']], sinonims)
            if ind == -1:
                bot.answer_callback_query(callback_query_id=call.id, text='–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É —ç–¥–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return 0

            call.data = 'names' + str(ind)

        names = all_names if call.data[:4] in ['mood', 'zodi'] else edit_names[user.vars['type']]
        need_ind_edits = metod.type_edits(call.data, user, edits, names)
        if len(need_ind_edits) == 0:
            user.saw_list = []
            need_ind_edits = metod.type_edits(call.data, user, edits, names)
        while 0 < len(need_ind_edits) < 5:
            user.saw_list = []
            need_ind_edits += metod.type_edits(call.data, user, edits, names)

        if user.admin:
            user.vars['admin_del'] = True
        for i in range(min(5, len(need_ind_edits))):
            user.saw_list.append(need_ind_edits[i])
            keyboard = metod.get_keyboard_video(need_ind_edits[i], 7 if user.admin else 3)
            user.message_del.append(bot.send_video(chat_id, edits[need_ind_edits[i]].video,
                                                   reply_markup=keyboard).message_id)
            time.sleep(0.1)

        text = '–ß—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä, –∑–∞ —Ä–∞–∑ —è –≤—ã–¥–∞—é –Ω–µ –±–æ–ª—å—à–µ 5 —ç–¥–∏—Ç–æ–≤' if len(need_ind_edits) > 0 else '–ü—É—Å—Ç–æ'
        path_back = {'mood': 'menu1', 'zodi': 'menu2', 'name': 'inmenu0', 'find': 'inmenu0'}
        if user.vars['type'] == 4:
            path_back['name'] = 'menu0'
        bot.delete_message(chat_id, call.message.message_id)
        metod.message(bot, chat_id, text, ['–ï—â—ë!'], call.data, edit=False, add_ind=False,
                      back=path_back[call.data[:4]])

    elif call.data[:8] == 'set_mood':
        ind, mood = call.data[8:].split('|')
        edits[int(ind)].mood = int(mood)
        bot.delete_message(chat_id, call.message.message_id)
        bot.answer_callback_query(callback_query_id=call.id, text='–≠–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω')

    if call.data == 'menu':
        metod.menu(bot, call, user)


@bot.message_handler(content_types=["document"])
def find_edit(message):
    global users, edits, mails, sinonims
    if message.chat.id == -1001698545646:
        bot.send_message(message.chat.id, 'All resaving...')
        info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(info.file_path)
        with open('JSON_database.txt', 'wb') as new_file:
            new_file.write(downloaded_file)
        users, edits, mails, sinonims = metod.load_all(bot, load_base=False)
        metod.save_all(bot, users, edits, mails, sinonims)


@bot.message_handler(content_types=["photo"])
def mail(message):
    user = get_user(message.chat.id)
    if user.admin:
        capt = message.caption + '\n'
        if capt.count('text: ') == 1 and capt.count('link: ') == 1:
            text = capt[capt.find('text: ') + 6:]
            text = text[:text.find('\n')]
            link = capt[capt.find('link: ') + 6:]
            link = link[:link.find('\n')]
            capt = capt.replace('text: ' + text + '\n', '').replace('link: ' + link + '\n', '')
            user.vars['post'] = (message.photo[-1].file_id, capt, text, link)
        else:
            user.vars['post'] = (message.photo[-1].file_id, message.caption)


@bot.message_handler(content_types=["video"])
def add_edit(message):
    user = get_user(message.chat.id)
    if user.admin:
        for edit in edits:
            if edit.caption == message.caption:
                metod.message(bot, message.chat.id, '–≠—Ç–æ—Ç —ç–¥–∏—Ç —É–∂–µ –≤ –±–∞–∑–µ', '', 'menu', edit=False)
                return 0

        text = message.caption.lower()
        type, name = 4, ''
        for i in range(len(type_edits) - 1):
            if (type_edits[i] + ':').lower() in text:
                type = i
                nameOld1 = message.caption[text.find(type_edits[type].lower()) + len(type_edits[type]) + 1:] + ' '
                nameOld = nameOld1[:nameOld1.find('\n')].strip()
                ind = metod.find_word(nameOld, edit_names[type], sinonims)
                name = edit_names[type][ind] if ind != -1 else nameOld

                if ind == -1:
                    edit_names[type].append(name)
                    all_names.append(name)
                else:
                    message.caption = message.caption.replace(nameOld, name)

        edits.append(metod.Edit(message.video.file_id, message.caption, type, name, 2, randint(0, 11)))

        text = '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–¥–∏—Ç–∞:'
        but = ['ü§° –†–∞–¥–æ—Å—Ç—å', 'ü•≥ –í–µ—Å–µ–ª—å–µ', 'üòé –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '‚òπÔ∏è –ì—Ä—É—Å—Ç—å ', 'ü§¨ –ì–Ω–µ–≤', 'üòÆ‚Äçüí® –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å']
        metod.message(bot, message.chat.id, text, but, 'set_mood' + str(len(edits)-1) + '|', edit=False, spec_bat=[])


@bot.message_handler(content_types=["text"])
def find_edit(message):
    user = get_user(message.chat.id)
    user.vars['text'] = message.text


thread = Thread(target=Timer)

print('START')
thread.start()
while True:
    try:
        bot.infinity_polling()
    except Exception as e:
        print(traceback.format_exc())
